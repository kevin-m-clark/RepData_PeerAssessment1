{"name":"Repdata peerassessment1","tagline":"Peer Assessment 1 for Reproducible Research","body":"\r\nLoading and preprocessing the data\r\n\r\n\r\nIntroduction\r\n\r\n\r\nIt is now possible to collect a large amount of data about personal movement using activity monitoring devices such as a Fitbit, Nike Fuelband, or Jawbone Up. These type of devices are part of the \"quantified self\" movement - a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. But these data remain under-utilized both because the raw data are hard to obtain and there is a lack of statistical methods and software for processing and interpreting the data.\r\n\r\n\r\nThis assignment makes use of data from a personal activity monitoring device. This device collects data at 5 minute intervals through out the day. The data consists of two months of data from an anonymous individual collected during the months of October and November, 2012 and include the number of steps taken in 5 minute intervals each day.\r\n\r\n\r\nData\r\n\r\n\r\nThe data for this assignment can be downloaded from the course web site: Dataset: Activity monitoring data\r\n The variables included in this dataset are: steps: Number of steps taking in a 5-minute interval (missing values are coded as NA) date: The date on which the measurement was taken in YYYY-MM-DD format interval: Identifier for the 5-minute interval in which measurement was taken The dataset is stored in a comma-separated-value (CSV) file and there are a total of 17,568 observations in this dataset.\r\n\r\n\r\nConventions used in this document:\r\n\r\n\r\nVariable names from a dataset are in all capital letters.\r\n\r\n\r\nRequirements\r\n\r\n\r\nReproducing this analysis requires use of the following R packages\r\n\r\nlibrary(dplyr);\r\nlibrary(ggplot2);\r\nlibrary(mice);\r\nlibrary(knitr);\r\nlibrary(chron);\r\nlibrary(scales);\r\n\r\n\r\nLoad Raw Data:\r\n\r\n#helper function to get data\r\ngetData <- function(url, zipName, dataFileName){\r\n  print(paste(\"loading data file: \", dataFileName));\r\n  tryCatch(\r\n    {\r\n\r\n      #check if data file already exists\r\n      if(file.exists(dataFileName)){\r\n        print(paste(\"ready to use: \", dataFileName));\r\n        return();\r\n      }\r\n      else{\r\n        print(paste(dataFileName, \" does not exist, attempting to get data from: \", zipName));\r\n      }\r\n\r\n      #if data file does not exist look for an archive that should contain it\r\n      #or download the archive\r\n      if(!file.exists(zipName)){\r\n        print(paste(zipName, \" does not exist, attempting to get data from: \", url));\r\n        download.file(dataURL, destfile = zipName);\r\n        print(paste(zipName, \" successfully downloaded from: \", url));\r\n      }\r\n\r\n      #if the archive is found try to unpack it\r\n      if(file.exists(zipName)){\r\n        print(paste(\"unzipping: \", zipName));\r\n        unzip(zipName)\r\n        print(paste(zipName, \" successfully unzipped\"));\r\n      }\r\n      else{\r\n        stop(paste(zipName, \" does not exist, check URL and zip name for accuracy\"));\r\n      }\r\n\r\n      #check if data file was in the archive\r\n      if(!file.exists(dataFileName)){\r\n        stop(paste(\"File not found: \", dataFileName))\r\n      }\r\n\r\n    }, \r\n    warning = function(w) {print(w);}, \r\n    error = function(e) {print(e);}\r\n  );\r\n}\r\n\r\n\r\ndataURL=\"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip\"\r\nzipName <- \"repdata-data-activity.zip\"\r\ndataFileName <- \"activity.csv\";\r\n\r\n#download and unzip data if necessary\r\ngetData(zipName, zipName, dataFileName);\r\n\r\n#read raw data\r\nrawActivityData <- read.csv(dataFileName, header=TRUE);\r\n\r\n\r\n\r\nPerform exploratory analysis on the raw data.\r\n\r\n\r\nBasic summary views:\r\n\r\ndim(rawActivityData);\r\nstr(rawActivityData);\r\nsummary(rawActivityData);\r\nhead(rawActivityData);\r\n\r\n\r\n\r\nThe STEPS variable contains  r sum(is.na(rawActivityData) == TRUE)  NA entries,\r\n we'll need to look at the distribution of NA values.\r\n\r\n\r\nThe DATES variable appears to have reasonable entries,\r\n we'll need to verify the dates are valid and data is collected\r\n in the same manner for each date.\r\n\r\n\r\nThe INTERVAL variable contains cryptic values,\r\n we'll need to interpret the meaning of entries in this variable.\r\n\r\n\r\nSegment raw data by DATE to ensure the date values represent valid dates,\r\n and each DATE has the same number of INTERVAL values which are measured\r\n by the same intervals:\r\n\r\n#ensure DATE variable contains valid date values, this function will fail\r\n#if some entry is not a valid date\r\nvalidDates <- data.frame(dates = as.Date(rawActivityData$date));\r\n\r\n#check the range of dates for validity\r\nrange(validDates$dates);\r\n\r\n#segment data by DATE\r\ndataByDate <- split(rawActivityData, rawActivityData$date);  \r\n\r\n#check number of dates\r\ndateCount <- length(dataByDate);\r\n\r\n#make sure all dates have the same number of intervals\r\nrowCountByDate <- sapply(dataByDate, function(x) nrow(x));\r\nallCountsEqual <- all(rowCountByDate == rowCountByDate[1]);\r\n\r\n#test if each date has the exact same intervals\r\nintervals <- lapply(dataByDate, function(x) as.data.frame(x)[,3]);\r\nintervalComparison <- all(unlist(intervals[1]) == unlist(intervals));\r\n\r\n\r\n\r\nWe see all DATE entries represent valid dates,\r\n the range of dates  r range(validDates$dates)[1]  --  r range(validDates$dates)[2]  matches the data description,\r\n and the data contains  r dateCount  dates.\r\n Each date contains  r rowCountByDate[1]  observations,\r\n and each DATE is segmented by the same INTERVAL values.\r\n\r\n\r\nAccording the description of the raw data, each\r\n INTERVAL represents 5 minutes of time. So given  r rowCountByDate[1] \r\n observations per day we account for  r 5 * rowCountByDate[1] / 60  hours per day.\r\n\r\n#do the math to show range of intervals equates to 24 hours per day\r\n5 * 288 / 60\r\n\r\n\r\nThe data contains  r length(unique(rawActivityData$interval))  unique intervals.\r\n visually examine the INTERVAL values to interpret their meaning:\r\n\r\nunique(rawActivityData$interval);\r\n\r\n\r\nInteresting, rather than sequentially numbering the\r\n the intervals 1- r rowCountByDate[1]  the INTERVAL values equate to 24\r\n hour time in the format hhmm, with 0 as midnight -- the minutes change\r\n in increments of 5.\r\n\r\n\r\nExamine the distribution of NA values:\r\n\r\nnaCounts <- sapply(dataByDate, function(x) sum(is.na(as.data.frame(x)[,1])==TRUE));\r\ntnaCounts <- table(naCounts);\r\ntnaCounts\r\n\r\n\r\nThis shows each day contains either 0 or 288 NA values for the STEPS variable,\r\n with  r as.vector(tnaCounts[2])  dates which contain only NA values for STEPS.\r\n The missing (NA) STEP entries account for  r round(100 * sum(is.na(rawActivityData) == TRUE) / nrow(rawActivityData), 2) % of the data.\r\n\r\n\r\nOther than the abundance of NA values the data looks pretty clean,\r\n so let's get to work.\r\n\r\n\r\nQ & A\r\n\r\n\r\nWhat is mean total number of steps taken per day?tag: h2 -> h3\r\n1.Calculate total number of steps taken each day\r\n\r\nsumStepsPerDate <- rawActivityData[complete.cases(rawActivityData),]  %>% \r\n                   group_by(date) %>% \r\n                   summarise(totalsteps=sum(steps));\r\n\r\n#quick exam of summary data\r\nstr(sumStepsPerDate);\r\nhead(sumStepsPerDate);\r\ndim(sumStepsPerDate);\r\n1.Make a histogram of the total number of steps taken each day.\r\n\r\nggplot(data=sumStepsPerDate, aes(sumStepsPerDate$totalsteps)) + \r\n  geom_histogram(breaks=seq(0, max(sumStepsPerDate$totalsteps), \r\n                            by = max(sumStepsPerDate$totalsteps) / length(unique(sumStepsPerDate$date))), \r\n                 col=\"red\", \r\n                 fill=\"green\", \r\n                 alpha = .2) + \r\n  xlab(\"Steps per Day\") +\r\n  ylab(\"Count of Days with X Steps per Day\") +\r\n  ggtitle(\"Sum of Steps Per Day (NA Removed)\");\r\n1.Calculate and report the mean and median of the total number of steps taken per day.\r\n\r\nmeanSumStepsPerDay <- mean(sumStepsPerDate$totalsteps);\r\nmedianSumStepsPerDay <- median(sumStepsPerDate$totalsteps);\r\n\r\n\r\n\r\nMean total steps taken per day (rounded):  r as.character(round(meanSumStepsPerDay)) \r\n Median of total steps taken per day:  r medianSumStepsPerDay  \r\n\r\n\r\nWhat is the average daily activity pattern?tag: h2 -> h3\r\n1.Make a time series plot (i.e. type = \"l\") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis).\r\n\r\n#compute mean steps per 5 minute interval\r\nmeanStepsPerInterval <- rawActivityData[complete.cases(rawActivityData),]  %>% \r\n                        group_by(interval) %>% \r\n                        summarise(meansteps=mean(steps));\r\n\r\nformattedIntervals <- sprintf(\"%04d\", meanStepsPerInterval$interval);\r\n\r\nsplitCodes <- paste(substr(formattedIntervals,1,2) , \":\" , \r\n                    substr(formattedIntervals,3,4), \":\", \"00\", \r\n                    sep=\"\");\r\n\r\n#splitTimes <- times(splitCodes);\r\nposixIntervals <- as.POSIXct(splitCodes, format=\"%H:%M:%S\")\r\n\r\n#create line plot - looks like the max mean interval is around 200 steps\r\nggplot(NULL, aes(posixIntervals, meanStepsPerInterval$meansteps)) + \r\n  geom_line() +\r\n  xlab(\"Interval\") +\r\n  ylab(\"Total Steps per Interval\") +\r\n  ggtitle(\"Mean Total Steps Per Interval (NA Removed)\") +\r\n  scale_x_datetime(labels=date_format(\"%H:%M\")) +\r\n  theme(axis.text.x = element_text(angle = -90, hjust = 1));\r\n\r\n\r\n1.Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?\r\n\r\n#compute max average interval\r\nmaxStepsPerInterval = max(meanStepsPerInterval$meansteps);\r\n\r\nmaxInterval <- meanStepsPerInterval %>% \r\n               filter(meansteps == maxStepsPerInterval) %>%\r\n               select(interval);\r\n\r\n\r\n\r\nInterval  r maxInterval  contains the maximum average steps across all days (rounded):  r as.character(round(maxStepsPerInterval, 2)) .\r\n\r\n\r\nImputing missing valuestag: h2 -> h3\r\n1.Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)\r\n\r\n\r\n\r\nPrevious NA analysis shows  r as.vector(tnaCounts[2])  dates contain only NA values for STEPS.\r\n\r\n#compute number of NA values in raw data\r\ntable(is.na(rawActivityData));\r\n#2304 total NAs in raw data\r\n\r\n#which columns contain NA values?\r\nsummary(rawActivityData);\r\n#looks like only the steps variable contains NA values\r\n\r\n#confirm the 2304 NAs are one per row\r\ntable(complete.cases(rawActivityData));\r\n\r\n#what percent of data is missing from the steps variable?\r\npctNA <- sum(is.na(rawActivityData$steps))/length(rawActivityData$steps)*100;\r\n\r\n\r\nFurther analysis of the NA values shows all 2304 NAs appear in the STEPS field, which comprises  r round(pctNA,2) % of the data in this field.\r\n1.Devise a strategy for filling in all of the missing values in the dataset.\r\n\r\n\r\nUse the MICE package to impute missing data!\r\n It's definitely more interesting then computing more means, etc...\r\n1.Create a new dataset that is equal to the original dataset but with the missing data filled in.\r\n\r\n#show the MICE summary of the raw data,\r\n#confirming STEPS variable contains 2304 NA values\r\nmd.pattern(rawActivityData);\r\n\r\n#impute missing values -- this takes a minute or two depending on values for m and maxit.\r\ntempData <- mice(rawActivityData, m=5, maxit=10, meth='pmm', seed=500);\r\nimputedActivityData <- complete(tempData,1);\r\n\r\n\r\n#show summary of dataframe with imputed values for steps\r\nsummary(imputedActivityData);\r\n\r\n1.Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?\r\n\r\n#compute sum of steps for each date\r\nsumImputedStepsPerDate <- imputedActivityData  %>% \r\n                          group_by(date) %>% \r\n                          summarise(totalsteps=sum(steps));\r\n\r\nggplot(data=sumImputedStepsPerDate, aes(sumImputedStepsPerDate$totalsteps)) + \r\n  geom_histogram(breaks=seq(0, max(sumImputedStepsPerDate$totalsteps), \r\n                            by = max(sumImputedStepsPerDate$totalsteps) / length(unique(sumImputedStepsPerDate$date))), \r\n                 col=\"red\", \r\n                 fill=\"green\", \r\n                 alpha = .2) + \r\n  xlab(\"Steps per Day\") +\r\n  ylab(\"Count of Days With X Steps per Day\") +\r\n  ggtitle(\"Sum of Steps Per Day (NA Imputed)\");\r\n\r\n\r\nmeanSumImputedStepsPerDay <- mean(sumImputedStepsPerDate$totalsteps);\r\nmedianSumImputedStepsPerDay <- median(sumImputedStepsPerDate$totalsteps);\r\n\r\n\r\n\r\n\r\nMean steps per day change\r\n\r\n\r\nMean total steps per day of data with NAs removed (rounded):  r as.character(round(meanSumStepsPerDay)) \r\n Mean total steps per day of imputed data (rounded):  r as.character(round(meanSumImputedStepsPerDay))  \r\n\r\n\r\nThe difference between NA removed data and Imputed data is (rounded):  r round(meanSumStepsPerDay - meanSumImputedStepsPerDay) \r\n which equates to the perrcent change(rounded):  r round(100 * (meanSumStepsPerDay-meanSumImputedStepsPerDay) / (meanSumStepsPerDay+meanSumImputedStepsPerDay) / 2, 2)  \r\n\r\n\r\nMean steps per day change\r\n\r\n\r\nMedian total steps per day of r data with NAs removed:  r medianSumStepsPerDay \r\n Median total steps per day of imputed data:  r medianSumImputedStepsPerDay  \r\n\r\n\r\nThe difference in NA removed data and Imputed data is:  r round(medianSumStepsPerDay - medianSumImputedStepsPerDay) \r\n which equates to the perrcent change:  r round(100 * (medianSumStepsPerDay-medianSumImputedStepsPerDay) / (medianSumStepsPerDay+medianSumImputedStepsPerDay) / 2, 2)  \r\n\r\n\r\nGraphical comparison of mean steps per interval: NAs removed vs. imputing values for NAs\r\n\r\n#impute data and then compare mean per interval between NA removed data and imputed data\r\n#compute mean steps per interval using imputed data\r\nmeanImputedStepsPerInterval <- imputedActivityData  %>% \r\n                               group_by(interval) %>% \r\n                               summarise(meansteps=mean(steps));\r\n\r\nformattedIntervals <- sprintf(\"%04d\", meanImputedStepsPerInterval$interval);\r\n\r\nsplitCodes <- paste(substr(formattedIntervals,1,2) , \":\" , \r\n                    substr(formattedIntervals,3,4), \":\", \"00\", \r\n                    sep=\"\");\r\n\r\n#splitTimes <- times(splitCodes);\r\nposixIntervals <- as.POSIXct(splitCodes, format=\"%H:%M:%S\");\r\n\r\n#create plot\r\nggplot(NULL, aes(posixIntervals, meanStepsPerInterval$meansteps)) + \r\n  geom_line(data = meanStepsPerInterval, aes(color=\"NA_Removed\")) +\r\n  geom_step(data = meanImputedStepsPerInterval, aes(color=\"Imputed\")) +\r\n  xlab(\"Interval\") +\r\n  ylab(\"Total Steps per Interval\") +\r\n  ggtitle(\"Mean Steps per Interval:  NA removed vs. Imputed\") + \r\n  scale_x_datetime(labels=date_format(\"%H:%M\")) +\r\n  scale_colour_manual(name=\"Line Color\", values=c(NA_Removed=\"black\", Imputed=\"red\")) +\r\n  theme(axis.text.x = element_text(angle = -90, hjust = 1));\r\n\r\n\r\n\r\nGraphical comparison of total steps per day: NAs removed vs. imputing values for NAs\r\n\r\n#compare plot of sum steps per date:  raw data (NA removed)  vs. imputed data\r\nggplot(NULL, aes(date, totalsteps, group=1)) + \r\n  geom_line(data = sumStepsPerDate, aes(color=\"NA_Removed\")) +\r\n  geom_step(data = sumImputedStepsPerDate, aes(color=\"Imputed\")) +\r\n  xlab(\"Date\") +\r\n  ylab(\"Total Steps per Interval\") +\r\n  ggtitle(\"Total Steps per Day:  NA removed vs. Imputed\")+\r\n  theme(axis.text.x = element_text(angle = -90, hjust = 1)) + \r\n  scale_colour_manual(name=\"Line Color\", values=c(NA_Removed=\"black\", Imputed=\"red\"));\r\n\r\n\r\n\r\nAre there differences in activity patterns between weekdays and weekends?tag: h2 -> h3\r\n1.Create a new factor variable in the dataset with two levels - \"weekday\" and \"weekend\" indicating whether a given date is a weekday or weekend day.\r\n\r\n#add weekend/weekday factor to the data set\r\n#that contains imputed data\r\nimputedActivityData$day_type <- as.factor(ifelse(grepl(\"Saturday|Sunday\" , weekdays(as.Date( as.character(imputedActivityData$date)))), \"weekend\", \"weekday\"));\r\n\r\n#confirm new factor column appears correct\r\nstr(imputedActivityData);\r\ntable(imputedActivityData$day_type)\r\n\r\n1.Make a panel plot containing a time series plot (i.e. type = \"l\") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis).\r\n\r\n#summarize weekday data by interval\r\nimputedWeekDaysMeanStepsPerInterval <- subset(imputedActivityData, day_type == \"weekday\") %>% \r\n                                       group_by(interval) %>% \r\n                                       summarise(meansteps=mean(steps));\r\n\r\n#summarize weekend data by interval\r\nimputedWeekEndsMeanStepsPerInterval <- subset(imputedActivityData, day_type == \"weekend\") %>% \r\n                                       group_by(interval) %>% \r\n                                       summarise(meansteps=mean(steps));\r\n\r\n\r\nformattedIntervals <- sprintf(\"%04d\", imputedWeekDaysMeanStepsPerInterval$interval);\r\n\r\nsplitCodes <- paste(substr(formattedIntervals,1,2) , \":\" , \r\n                    substr(formattedIntervals,3,4), \":\", \"00\", \r\n                    sep=\"\");\r\n\r\n#splitTimes <- times(splitCodes);\r\nposixIntervals <- as.POSIXct(splitCodes, format=\"%H:%M:%S\");\r\n\r\n#2 panel plot off weekends vs. weekdays\r\npar(mfrow=c(2,1));\r\nplot(x=posixIntervals, \r\n     y=imputedWeekDaysMeanStepsPerInterval$meansteps, \r\n     type=\"l\",\r\n     xlab=\"Interval (Formatted in hhmm 24 hour time)\", \r\n     ylab=\"Mean Steps\",\r\n     ylim=c(0, max(imputedWeekDaysMeanStepsPerInterval$meansteps,\r\n                   imputedWeekEndsMeanStepsPerInterval$meansteps)));\r\n     title(main=\"Weekday Intervals\");\r\n\r\nplot(x=posixIntervals, \r\n     y=imputedWeekEndsMeanStepsPerInterval$meansteps, \r\n     type=\"l\",\r\n     xlab=\"Interval\", \r\n     ylab=\"Mean Steps\",\r\n     ylim=c(0, max(imputedWeekDaysMeanStepsPerInterval$meansteps,\r\n                   imputedWeekEndsMeanStepsPerInterval$meansteps)));\r\n     title(main=\"Weekend Intervals\");\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nThis analysis is begging for a over-lay of the previous 2 graphs,\r\n so here it is:\r\n\r\nplot(x=posixIntervals, \r\n     y=imputedWeekDaysMeanStepsPerInterval$meansteps, \r\n     type=\"l\",\r\n     col=\"red\",\r\n     xlab=\"Interval\", \r\n     ylab=\"Mean Steps\",\r\n     ylim=c(0, max(imputedWeekDaysMeanStepsPerInterval$meansteps,\r\n                   imputedWeekEndsMeanStepsPerInterval$meansteps)));\r\n\r\nlines(x=posixIntervals, \r\n      y=imputedWeekEndsMeanStepsPerInterval$meansteps,\r\n      col=\"black\");\r\n\r\ntitle(main=\"Weekday vs Weekend Mean Steps per Interval\");\r\nlegend(x=\"topright\", legend=c(\"Weekdays\", \"Weekends\"),\r\n       col=c(\"red\", \"black\"), lwd=1)\r\n\r\n\r\n\r\n\r\nThis shows clear indication that people walk/run more during the morning of weekdays, while they walk/run more during the afternoon of weekends.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}